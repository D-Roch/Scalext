{"name":"Scalext","tagline":"Ext JS 4.2 Driver for Play Framework 2.1","body":"Scalext\r\n=======\r\n\r\n Ext JS Driver for Play Framework 2.1\r\n\r\n## Features\r\n\r\n * Supports single or batched JSON requests\r\n * Automatic json serialization of method results\r\n * Direct API configuration using annotations\r\n * DSL for creating Ext JS objects\r\n * Parallel execution of batched requests\r\n\r\n## Roadmap\r\n\r\n * Unit tests\r\n * Support for more frameworks\r\n * Expanding DSL\r\n\r\n## Getting started\r\n\r\n Download the latest distributable jar [here](http://data.razko.nl/projects/scalext/) and put it in your `lib` folder\r\n\r\n Add the classes from which you want to generate a Direct Api to `conf/application.conf`, for example:\r\n\r\n```\r\nscalext.direct.classes=\"direct.ProfileForm,direct.RegistrationForm,direct.EchoService\"\r\n```\r\n\r\nGenerate the Direct Api inside a view by adding the following code:\r\n\r\n```scala\r\n@import play.api.libs.json.Json\r\n<script type=\"text/javascript\">\r\nExt.direct.Manager.addProvider(@Html(Json.stringify(com.scalext.direct.remoting.api.ApiFactory.config.toJson)));\r\n</script>\r\n```\r\n\r\n The Direct Api is now available!\r\n\r\n## Configuring the Direct API\r\n\r\n Classes can be exposed to the Direct API by adding annotations to methods.\r\n\r\n```scala\r\ncase class Profile(name: String, email: String, company: String)\r\n\r\n@Remotable(name = \"Scalext.example.Profile\")\r\nclass Form {\r\n\r\n  @Remotable\r\n  def getBasicInfo(): FormResult = {\r\n    var profile = Profile(\r\n      \"Roy van Kaathoven\",\r\n      \"ik@royvankaathoven.nl\",\r\n      \"Roy\")\r\n\r\n    FormResult(profile)\r\n  }\r\n\r\n  @FormHandler\r\n  def updateBasicInfo(profile: Profile): FormResult = {\r\n    FormResult(\r\n      null,\r\n      errors = Map(\"name\" -> \"wrong info\"))\r\n  }\r\n}\r\n```\r\n\r\n```scala\r\n@Remotable(name = \"Scalext.example.Upload\")\r\nclass Upload {\r\n\r\n  @FormHandler\r\n  def uploadFile(post: Any, files: Seq[TemporaryFile]): FormResult = {\r\n\r\n    println(\"Post \" + post)\r\n    println(\"Files \" + files)\r\n\r\n    FormResult(Map(\"msg\" -> s\"${files.size} file(s) succesfully uploaded\"))\r\n  }\r\n\r\n}\r\n```\r\n\r\nThe `@Remotable` annotation marks a method as Direct Method, which means it will be exposed to the Direct API.\r\nBy default the method- or classname will be used, this can be overridden by setting the `name` parameter.\r\n\r\nThe `@FormHandler` annotation marks a method as as Form submit handler, which means it can handle form submissions and even file uploads.\r\nIf the method has to read file uploads then make sure the second parameter can handle the `Seq[TemporaryFile]` type.\r\n\r\n## Documentation\r\n\r\n * [API](http://ci.razko.nl/job/Scalext/Documentation/index.html)\r\n * [Example project](https://github.com/Rovak/ScalextExample)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}